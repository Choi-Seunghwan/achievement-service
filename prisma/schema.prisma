generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MissionStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
  // DELETED // 삭제 됨
}

enum MissionTaskStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
  // DELETED // 삭제 됨
}

enum MissionRepeatType {
  NONE // 없음 (1회만)
  DAILY // 매일
  WEEKLY // 요일 지정
}

enum MissionRepeatDay {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum AchievementStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
}

// 미션
model Mission {
  id            Int           @id @default(autoincrement())
  accountId     Int           @map("account_id")
  achievementId Int?          @map("achievement_id")
  name          String
  description   String?
  status        MissionStatus @default(IN_PROGRESS)
  icon          String?

  repeatType MissionRepeatType  @map("repeat_type")
  repeatDays MissionRepeatDay[] @map("repeat_days")

  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")

  // progress    Int?      @default(0)
  // progressMax Int?      @default(100)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  achievement    Achievement?     @relation(fields: [achievementId], references: [id])
  missionTasks   MissionTask[]
  missionTags    MissionTag[]
  missionHistory MissionHistory[]

  @@map("mission")
}

// 미션 하위 작업
model MissionTask {
  id        Int               @id @default(autoincrement())
  missionId Int               @map("mission_id")
  name      String
  status    MissionTaskStatus @default(IN_PROGRESS)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  mission Mission @relation(fields: [missionId], references: [id])

  @@map("mission_task")
}

// 미션 이력
model MissionHistory {
  id           Int     @id @default(autoincrement())
  missionId    Int     @map("mission_id")
  taskId       Int?    @map("task_id")
  completed    Boolean
  taskSnapshot Json? // 기록 당시 정보

  createdAt DateTime @default(now()) @map("created_at")

  mission Mission @relation(fields: [missionId], references: [id])

  @@map("mission_histories")
}

// 업적
model Achievement {
  id          Int               @id @default(autoincrement())
  accountId   Int               @map("account_id")
  name        String
  status      AchievementStatus @default(IN_PROGRESS)
  icon        String?
  description String?

  missions Mission[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  completedAt DateTime? @map("completed_at")

  @@map("achievement")
}

// 태그
model Tag {
  id        Int     @id @default(autoincrement())
  accountId Int     @map("account_id")
  name      String
  color     String?

  missions MissionTag[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tag")
}

// 태그 - 미션 연결
model MissionTag {
  id        Int @id @default(autoincrement())
  missionId Int @map("mission_id")
  tagId     Int @map("tag_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  mission Mission @relation(fields: [missionId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([missionId, tagId]) // 중복 방지
  @@map("mission_tag")
}

// 공개 업적 (마스터)
model PublicAchievement {
  id          Int     @id @default(autoincrement())
  creatorId   Int     @map("creator_id")
  name        String
  description String?
  icon        String?

  missions     PublicMission[]
  participants AchievementParticipant[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("public_achievement")
}

// 공개 미션 (마스터)
model PublicMission {
  id                  Int                @id @default(autoincrement())
  publicAchievementId Int                @map("public_achievement_id")
  name                String
  description         String?
  repeatType          MissionRepeatType
  repeatDays          MissionRepeatDay[]
  icon                String?

  tasks PublicMissionTask[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  PublicAchievement PublicAchievement? @relation(fields: [publicAchievementId], references: [id])

  @@map("public_mission")
}

// 공개 작업 (마스터)
model PublicMissionTask {
  id              Int    @id @default(autoincrement())
  name            String
  publicMissionId Int    @map("public_mission_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  PublicMission PublicMission? @relation(fields: [publicMissionId], references: [id])

  @@map("public_mission_task")
}

// 공개 업적 참여 기록
model AchievementParticipant {
  id                    Int @id @default(autoincrement())
  accountId             Int @map("account_id")
  publicAchievementId   Int @map("public_achievement_id")
  personalAchievementId Int @map("personal_achievement_id")

  jointedAt DateTime  @default(now()) @map("joined_at")
  leavedAt  DateTime? @map("leaved_at")

  PublicAchievement PublicAchievement? @relation(fields: [publicAchievementId], references: [id])

  @@unique([accountId, publicAchievementId])
  @@map("achievement_participant")
}
