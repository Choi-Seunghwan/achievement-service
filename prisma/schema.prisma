generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MissionStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
  // DELETED // 삭제 됨
}

enum MissionTaskStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
  // DELETED // 삭제 됨
}

enum MissionRepeatType {
  NONE // 없음 (1회만)
  DAILY // 매일
  WEEKLY // 요일 지정
}

enum MissionRepeatDay {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum AchievementStatus {
  IN_PROGRESS // 진행 중
  COMPLETED // 완료
}

// 미션
model Mission {
  id              Int           @id @default(autoincrement())
  accountId       Int           @map("account_id")
  achievementId   Int?          @map("achievement_id")
  publicMissionId Int?
  name            String
  description     String?
  status          MissionStatus @default(IN_PROGRESS)
  icon            String?

  repeatType MissionRepeatType  @map("repeat_type")
  repeatDays MissionRepeatDay[] @map("repeat_days")

  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")

  // progress    Int?      @default(0)
  // progressMax Int?      @default(100)

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  completedAt DateTime? @map("completed_at")

  achievement    Achievement?     @relation(fields: [achievementId], references: [id])
  missionTasks   MissionTask[]
  missionTags    MissionTag[]
  missionHistory MissionHistory[]

  publicMission PublicMission? @relation(fields: [publicMissionId], references: [id])

  @@index([achievementId, publicMissionId])
  @@map("mission")
}

// 미션 하위 작업
model MissionTask {
  id                  Int               @id @default(autoincrement())
  missionId           Int               @map("mission_id")
  publicMissionTaskId Int?
  name                String
  status              MissionTaskStatus @default(IN_PROGRESS)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  mission           Mission            @relation(fields: [missionId], references: [id])
  publicMissionTask PublicMissionTask? @relation(fields: [publicMissionTaskId], references: [id])

  @@index([missionId, publicMissionTaskId])
  @@map("mission_task")
}

// 미션 이력
model MissionHistory {
  id           Int     @id @default(autoincrement())
  missionId    Int     @map("mission_id")
  taskId       Int?    @map("task_id")
  completed    Boolean
  taskSnapshot Json? // 기록 당시 정보

  createdAt DateTime @default(now()) @map("created_at")

  mission Mission @relation(fields: [missionId], references: [id])

  @@index([missionId, taskId])
  @@map("mission_histories")
}

// 업적
model Achievement {
  id                  Int               @id @default(autoincrement())
  accountId           Int               @map("account_id")
  publicAchievementId Int?
  name                String
  status              AchievementStatus @default(IN_PROGRESS)
  icon                String?
  description         String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  completedAt DateTime? @map("completed_at")

  missions Mission[]

  publicAchievement PublicAchievement? @relation(fields: [publicAchievementId], references: [id])

  @@index([accountId, publicAchievementId])
  @@map("achievement")
}

// 태그
model Tag {
  id        Int     @id @default(autoincrement())
  accountId Int     @map("account_id")
  name      String
  color     String?

  missions MissionTag[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([accountId])
  @@map("tag")
}

// 태그 - 미션 연결
model MissionTag {
  id        Int @id @default(autoincrement())
  missionId Int @map("mission_id")
  tagId     Int @map("tag_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  mission Mission @relation(fields: [missionId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@index([missionId, tagId])
  @@map("mission_tag")
}

// 공개 업적 (마스터)
model PublicAchievement {
  id          Int     @id @default(autoincrement())
  creatorId   Int     @map("creator_id")
  name        String
  description String?
  icon        String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  missions     PublicMission[]
  participants AchievementParticipant[]
  achievement  Achievement[]

  @@index([creatorId])
  @@map("public_achievement")
}

// 공개 미션 (마스터)
model PublicMission {
  id                  Int                @id @default(autoincrement())
  publicAchievementId Int                @map("public_achievement_id")
  name                String
  description         String?
  repeatType          MissionRepeatType
  repeatDays          MissionRepeatDay[]
  icon                String?

  tasks PublicMissionTask[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  publicAchievement PublicAchievement? @relation(fields: [publicAchievementId], references: [id])
  Mission           Mission[]

  @@index([publicAchievementId])
  @@map("public_mission")
}

// 공개 작업 (마스터)
model PublicMissionTask {
  id              Int    @id @default(autoincrement())
  name            String
  publicMissionId Int    @map("public_mission_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  publicMission PublicMission? @relation(fields: [publicMissionId], references: [id])
  MissionTask   MissionTask[]

  @@index([publicMissionId])
  @@map("public_mission_task")
}

// 공개 업적 참여 기록
model AchievementParticipant {
  id                  Int @id @default(autoincrement())
  accountId           Int @map("account_id")
  publicAchievementId Int @map("public_achievement_id")

  jointedAt DateTime  @default(now()) @map("joined_at")
  leavedAt  DateTime? @map("leaved_at")

  publicAchievement PublicAchievement? @relation(fields: [publicAchievementId], references: [id])

  @@unique([accountId, publicAchievementId])
  @@index([accountId, publicAchievementId])
  @@map("achievement_participant")
}

model PublicAchievementComment {
  id                  Int     @id @default(autoincrement())
  accountId           Int     @map("account_id")
  publicAchievementId Int     @map("public_achievement_id")
  comment             String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([accountId])
  @@map("public_achievement_comment")
}
